# MongoDB에서 OpenSearch로 데이터 전송 파이프라인
# 금융 거래 데이터 및 시스템 로그 처리

input {
  # MongoDB 입력
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/mongodb-driver/mongo-java-driver-3.12.14.jar"
    jdbc_driver_class => "com.mongodb.client.MongoClient"
    jdbc_connection_string => "mongodb://test-mongodb:27017/opensearch_test"
    jdbc_user => ""
    jdbc_password => ""
    
    # 고객 데이터 쿼리
    statement => "SELECT * FROM customers"
    schedule => "*/5 * * * *"
    type => "customers"
  }
  
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/mongodb-driver/mongo-java-driver-3.12.14.jar"
    jdbc_driver_class => "com.mongodb.client.MongoClient"
    jdbc_connection_string => "mongodb://test-mongodb:27017/opensearch_test"
    jdbc_user => ""
    jdbc_password => ""
    
    # 거래 데이터 쿼리
    statement => "SELECT * FROM transactions WHERE timestamp > :sql_last_value"
    schedule => "*/2 * * * *"
    type => "transactions"
    use_column_value => true
    tracking_column => "timestamp"
    tracking_column_type => "timestamp"
  }
  
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/mongodb-driver/mongo-java-driver-3.12.14.jar"
    jdbc_driver_class => "com.mongodb.client.MongoClient"
    jdbc_connection_string => "mongodb://test-mongodb:27017/opensearch_test"
    jdbc_user => ""
    jdbc_password => ""
    
    # 시스템 로그 쿼리
    statement => "SELECT * FROM system_logs WHERE timestamp > :sql_last_value"
    schedule => "*/1 * * * *"
    type => "system_logs"
    use_column_value => true
    tracking_column => "timestamp"
    tracking_column_type => "timestamp"
  }
}

filter {
  if [type] == "customers" {
    # 고객 데이터 필터링
    mutate {
      add_field => { "data_type" => "customer" }
      add_field => { "source" => "mongodb" }
    }
    
    # 위치 데이터 처리
    if [location] {
      mutate {
        add_field => { "location_lat" => "%{[location][coordinates][0]}" }
        add_field => { "location_lon" => "%{[location][coordinates][1]}" }
      }
    }
    
    # 날짜 필드 변환
    date {
      match => [ "registration_date", "ISO8601" ]
      target => "registration_date_parsed"
    }
    
    date {
      match => [ "last_transaction", "ISO8601" ]
      target => "last_transaction_parsed"
    }
  }
  
  if [type] == "transactions" {
    # 거래 데이터 필터링
    mutate {
      add_field => { "data_type" => "transaction" }
      add_field => { "source" => "mongodb" }
    }
    
    # 금액 필드 정규화
    mutate {
      convert => { "amount" => "integer" }
      convert => { "risk_score" => "float" }
    }
    
    # 위치 데이터 처리
    if [location] {
      mutate {
        add_field => { "location_lat" => "%{[location][coordinates][0]}" }
        add_field => { "location_lon" => "%{[location][coordinates][1]}" }
      }
    }
    
    # 날짜 필드 변환
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "timestamp_parsed"
    }
    
    # 의심 거래 플래그 처리
    if [is_suspicious] == true {
      mutate {
        add_tag => [ "suspicious_transaction" ]
        add_field => { "alert_level" => "high" }
      }
    }
  }
  
  if [type] == "system_logs" {
    # 시스템 로그 필터링
    mutate {
      add_field => { "data_type" => "system_log" }
      add_field => { "source" => "mongodb" }
    }
    
    # 로그 레벨에 따른 태그 추가
    if [level] == "ERROR" {
      mutate {
        add_tag => [ "error_log" ]
        add_field => { "alert_level" => "critical" }
      }
    } else if [level] == "WARN" {
      mutate {
        add_tag => [ "warning_log" ]
        add_field => { "alert_level" => "medium" }
      }
    }
    
    # 시스템 메트릭 처리
    if [details] {
      mutate {
        add_field => { "cpu_usage" => "%{[details][cpu_usage]}" }
        add_field => { "memory_usage" => "%{[details][memory_usage]}" }
        add_field => { "response_time" => "%{[details][response_time]}" }
        add_field => { "active_connections" => "%{[details][active_connections]}" }
      }
    }
    
    # 날짜 필드 변환
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "timestamp_parsed"
    }
  }
  
  # 공통 필터링
  mutate {
    add_field => { "processed_at" => "%{@timestamp}" }
    add_field => { "pipeline_version" => "1.0" }
  }
  
  # 불필요한 필드 제거
  mutate {
    remove_field => [ "@version", "@timestamp" ]
  }
}

output {
  # OpenSearch로 데이터 전송
  opensearch {
    hosts => [ "https://opensearch:9200" ]
    user => "admin"
    password => "Kcb2025opSLabAi9"
    ssl => true
    ssl_certificate_verification => false
    
    # 인덱스 이름 설정
    if [type] == "customers" {
      index => "mongodb-customers-%{+YYYY.MM.dd}"
    } else if [type] == "transactions" {
      index => "mongodb-transactions-%{+YYYY.MM.dd}"
    } else if [type] == "system_logs" {
      index => "mongodb-system-logs-%{+YYYY.MM.dd}"
    }
    
    # 문서 ID 설정
    document_id => "%{[_id]}"
    
    # 템플릿 설정
    template_name => "mongodb_template"
    template => {
      "index_patterns" => ["mongodb-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "data_type" => { "type" => "keyword" }
          "source" => { "type" => "keyword" }
          "location_lat" => { "type" => "float" }
          "location_lon" => { "type" => "float" }
          "amount" => { "type" => "long" }
          "risk_score" => { "type" => "float" }
          "cpu_usage" => { "type" => "float" }
          "memory_usage" => { "type" => "float" }
          "response_time" => { "type" => "long" }
          "active_connections" => { "type" => "long" }
          "timestamp_parsed" => { "type" => "date" }
          "registration_date_parsed" => { "type" => "date" }
          "last_transaction_parsed" => { "type" => "date" }
        }
      }
    }
  }
  
  # 디버깅용 로그 출력
  if [type] == "transactions" and [is_suspicious] == true {
    stdout {
      codec => rubydebug
    }
  }
  
  if [type] == "system_logs" and [level] == "ERROR" {
    stdout {
      codec => rubydebug
    }
  }
}
